"""Script to create "topic" clusters from wikinews documents."""
import json
import os
import pickle

import click
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

from utils import tokenize, load_data


def cluster(text_infos, n_clusters):
    """Do kmeans clustering, and return the computed results.

    Args:
        text_infos: list of dicts, info about texts to cluster
        n_clusters: int, number of clusters
    Returns: kmeans model, vectorizer, raw text clusters
    """
    vectorizer = TfidfVectorizer(tokenizer=tokenize, stop_words='english')
    data = vectorizer.fit_transform([text_info['text'] for text_info in text_infos])
    kmeans = KMeans(n_clusters=n_clusters).fit(data)
    predictions = kmeans.predict(data)
    clusters = {}
    for prediction, text_info in zip(predictions, text_infos):
        clusters.setdefault(prediction, [])
        clusters[prediction].append(text_info)
    return kmeans, vectorizer, clusters


@click.command()
@click.option('--input_dir', '-i', help='Input directory, of files generated by Wikiextractor.py')
@click.option('--output_dir', '-o', help='Output dir, for the pickled cluster model and the raw doc clusters')
@click.option('--n_clusters', '-n', default=500, help='Number of clusters')
def main(input_dir, output_dir, n_clusters):
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)
    clusters_dir = os.path.join(output_dir, 'clusters')
    if not os.path.exists(clusters_dir):
        os.mkdir(clusters_dir)

    data = load_data(input_dir)
    model, vect, doc_clusters = cluster(data, n_clusters)
    with open(os.path.join(output_dir, 'model.pkl'), 'wb') as f:
        pickle.dump(model, f)
    with open(os.path.join(output_dir, 'vectorizer.pkl'), 'wb') as f:
        pickle.dump(vect, f)
    for i, doc_cluster in doc_clusters.items():
        with open(os.path.join(clusters_dir, 'cluster_{}'.format(i)), 'wt', encoding='utf-8') as f:
            cluster_docs_string = '\n'.join([json.dumps(doc) for doc in doc_cluster])
            f.write(cluster_docs_string)


if __name__ == '__main__':
    main()
